name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-test-build:
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_BUILD_MODE: 'true'
      NEXT_PUBLIC_SUPABASE_URL: 'https://example.supabase.co'
      NEXT_PUBLIC_SUPABASE_ANON_KEY: 'mock-anon-key'
      SUPABASE_SERVICE_ROLE_KEY: 'mock-service-role-key'
      STRIPE_SECRET_KEY: 'sk_test_mock'
      STRIPE_WEBHOOK_SECRET: 'whsec_mock'
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: 'pk_test_mock'
    
    steps:
    - uses: actions/checkout@v3
    
    # Install pnpm FIRST using the official action
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false
    
    # THEN setup Node.js with pnpm cache
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'pnpm'
    
    # Verify pnpm is working
    - name: Verify pnpm installation
      run: pnpm --version
    
    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile
    
    - name: Lint
      run: pnpm run lint
    
    - name: Type check
      run: pnpm run typecheck
    
    - name: Run tests
      run: pnpm run test
    
    - name: Build
      run: |
        chmod +x ./scripts/build-ci.sh
        ./scripts/build-ci.sh
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage

  deploy:
    needs: lint-test-build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_BUILD_MODE: 'true'
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
    
    steps:
    - uses: actions/checkout@v3
    
    # Install pnpm FIRST
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false
    
    # THEN setup Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'pnpm'
    
    - name: Install Vercel CLI
      run: pnpm add -g vercel@latest
    
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      env:
        VERCEL_BUILD_COMMAND: "pnpm run vercel-build"
    
    - name: Deploy Project Artifacts to Vercel
      run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  preview-deploy:
    needs: lint-test-build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_BUILD_MODE: 'true'
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
    
    steps:
    - uses: actions/checkout@v3
    
    # Install pnpm FIRST
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false
    
    # THEN setup Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'pnpm'
    
    - name: Install Vercel CLI
      run: pnpm add -g vercel@latest
    
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Build Project Artifacts
      run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      env:
        VERCEL_BUILD_COMMAND: "pnpm run vercel-build"
    
    - name: Deploy Project Artifacts to Vercel
      id: deploy
      run: echo "url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})" >> $GITHUB_OUTPUT
    
    - name: Comment Preview URL
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue_number = context.issue.number;
          const url = '${{ steps.deploy.outputs.url }}';
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue_number,
            body: `âœ… Preview deployment is ready! URL: ${url}`
          });
